<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicMenuMapper">

    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">
        <id property="code" column="menu_code"/>
        <result property="name" column="menu_name"/>
        <result property="price" column="menu_price"/>
        <result property="categoryCode" column="category_code"/>
        <result property="orderableStatus" column="orderable_status"/>
    </resultMap>

    <!--
    설명. <![CDATA[ ... ]]> : Character Data의 약어로, XML 문서 내에서 문자열 데이터를 나타내는 방식 중 하나다.
     XML 파서는 '<'와 '>', '&' 같은 문자를 평문(plaintext)이 아닌 키워드나 구분자 같은 특별한 문자로 인식하게 된다.
     이 문자들을 포함한 텍스트 데이터를 안전하게 포함시키기 위해 CDATA 섹션을 사용할 수 있다.
     ===========================================================================================================
     주의사항!
     - CDATA 섹션 안에 "]]>" 문자열이 포함될 수 없음 : 이는 CDATA 섹션의 종료를 나타내는 구문이기 때문.
     - CDATA 섹션은 XML 파서에 의해 구문 분석되지 않으므로, 이 안에 포함된 내용은 XML 구문 오류 체크의 대상이 아님.
    -->
    <!--설명. <if> 태그 : test 속성의 조건식에 만족할 때만 엘리먼트 구문을 쿼리에 포함시킨다.-->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            a.menu_code,
            a.menu_price,
            a.menu_name,
            a.category_code,
            a.orderable_status
        FROM
            tbl_menu a
        WHERE
            a.orderable_status = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
            AND a.menu_price < #{ price }
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND a.menu_price between 10000 AND #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND a.menu_price between 20000 AND #{ price }
        </if>
        <if test="price gt 30000">
            AND a.menu_price between 30000 AND #{ price }
        </if>
        ORDER BY a.menu_code
    </select>

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
            a.menu_code,
            a.menu_name,
            a.menu_price,
            a.category_code,
            a.orderable_status
        FROM
            tbl_menu a
        <if test="condition == 'category'">
            JOIN
            tbl_category b on (a.category_code = b.category_code)
        </if>
        WHERE
            a.orderable_status = 'Y'
        <if test="condition == 'name'">
            AND a.menu_name LIKE concat('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
            AND b.category_name = #{ value }
        </if>
        ORDER BY a.menu_code
    </select>

    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
            a.menu_code,
            a.menu_name,
            a.menu_price,
            a.category_code,
            a.orderable_status
        FROM
            tbl_menu a
        WHERE
            a.orderable_status = 'Y'
        <choose>
            <when test="value == '식사'">
                AND a.category_code IN (1, 4, 5, 6, 7)
            </when>
            <when test="value == '음료'">
                AND a.category_code IN (2, 8, 9, 10)
            </when>
            <otherwise>
                AND a.category_code IN (3, 11, 12)
            </otherwise>
        </choose>
        ORDER BY
            a.menu_code
    </select>

    <!--설명. <foreach>태크 : java의 for 반복문과 동일하게 동작한다.
         다만, 여러개의 attribute를 설정해줘야 하기 때문에 사용법을 숙지해야한다.
         1. collection : 반복을 수행할 대상
         2. item : 반복을 수행할 때마다 반환받는 값의 이름
         3. open : <foreach> 엘리먼트 구문의 가장 앞에 붙여지는 문자
         4. separator : 반복이 수행될때 반환받은 item 사이에 붙여지는 문자
         5. close : <forecah> 엘리먼트 구문의 마지막에 붙여지는 문자
         -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            a.menu_code,
            a.menu_name,
            a.menu_price,
            a.category_code,
            a.orderable_status
        FROM
            tbl_menu a
        WHERE
            a.orderable_status = 'Y'
            AND a.menu_code IN
        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">
            #{ menuCode }
        </foreach>
        <!--
        필기. parameter 객체를 선언하지 않아도, static 필드나 static 메서드에 직접 접근하여 이를 parameter로 바로 사용가능하다.
         - static field 접근 시 -> collection = "@풀클래스명@필드명"
         - static method 접근시 -> colection = "@풀클래스명@메소드명()"
         즉, 아래처럼 static 메서드에 직접 접근해 사용하면 mapper 인터페이스와 Service 레이어에서 parameter를 직접 넘겨주지 않아도 된다.
         (단, 아래를 테스트 할 때 메서드 인자와 인터페이스 매개변수를 삭제하고 테스트해야 한다.)
         -->
<!--        <foreach collection="@com.ohgiraffers.section01.xml.Applicaton@createRandomMenuCodeList()" item="menuCode" open="(" separator=", " close=")">-->
<!--            #{ menuCode }-->
<!--        </foreach>-->
        ORDER BY
            a.menu_code
    </select>

    <!--
    설명.<where>태그
     엘리먼트 구문(SQL)이 WHERE로 시작하지 않으면 "where"를 자동으로 입력해준다.
     또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시힌다.
     단, name 부분에 where를 빼주지 않으면 "where where" 로 where 구문이 2개 중복되어 들어갈 수 도 있다.
     엘리먼트 구문이 AND나 OR로 시작하면 자동으로 해당 "where" 구문을 삭제해준다.
     <where>
        <if test="nameValue != null">
           A.MENU_NAME LIKE CONCAT('%',  #{ nameValue }, '%')
        </if>
        <if test="categoryValue != null">
            AND A.CATEGORY_CODE = #{ categoryValue }
        </if>
     </where>
    -->
    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
            a.menu_code,
            a.menu_name,
            a.menu_price,
            a.category_code,
            a.orderable_status
        FROM
            tbl_menu a
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                a.menu_code = #{ value }
            </where>
        </if>
        ORDER BY
            a.menu_code
    </select>

    <!--
    설명. <trim> 태그
     조회 조건에 AND 또는 OR로 시작하지 않는 다른 문자로 시작하는 경우와 같이
     <where> 태그가 기본적으로 처리해주는 기능에 추가 규칙을 정의하가 위해<trim> 엘리먼트를 제공하고 있다.
     1. prefix  : 처리 후 엘리먼트의 내용이 있다면, 가장 앞에 붙여줄 내용을 기술
     2. prefixOverrides : 처리 후 엘리먼트 내용중 가장 앞의 속성값에 해당하는 문자를 자동으로 삭제해줌.
     3. suffix : 처리 후 엘리먼트의 내용이 있다면, 가장 뒤에 붙여줄 내용을 기술
     4. suffixOverrides :  처리후 엘리먼트 내용 중 가장 뒤의 속성값에 해당하는 문자를 자동으로 삭제해줌
    -->
    <select id="searchMenuByOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            a.menu_code,
            a.menu_name,
            a.menu_price,
            a.category_code,
            a.orderable_status
        FROM
            tbl_menu a
        <!-- 설명. 문제발생 상황 : 카테고리로만 조회하는 경우 WHERE가 붙지 않아 쿼리 오류로 조회 불가하다. -->
        <!--
            <if test="nameValue != null">
                WHERE A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        -->


        <!-- 필기. 해결방법 1: <where> 태그 이용  -->
        <!--
            <where>
                <if test="nameValue != null">
                    A.MENU_NAME LIKE CONCAT('%',  #{ nameValue }, '%')
                </if>
                <if test="categoryValue != null">
                    AND A.CATEGORY_CODE = #{ categoryValue }
                </if>
            </where>
        -->

        <!-- 필기. 해결방법 2: <trim> 태그 이용 -->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>

        <!-- 필기. (추가)
                  <bind> 태그 : OGNL 표현식을 이용하여 변수를 만든 후 바인딩
                               _parameter가 파라미터로 전달된 Object를 의미하며, collection의 경우 get, Object의 경우 getter를 이용 -->
        <!--
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                <bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'"/>
                A.MENU_NAME LIKE #{ namePattern }
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>
        -->
    </select>

    <update id="modifyMenu" parameterType="hashmap">
        <!-- 설명. 문제 발생 상황 : 메뉴명 값을 입력하지 않은 경우 SET이 붙지 않아 쿼리 오류로 수정 불가하다. -->
        <!--
             UPDATE
                    TBL_MENU
             <if test="name != null and name != ''">
                SET MENU_NAME = #{ name }
             </if>
             <if test="categoryCode != null and categoryCode gt 0">
                  , CATEGORY_CODE = #{ categoryCode }
             </if>
             <if test="orderableStatus != null and orderableStatus != ''">
                  , ORDERABLE_STATUS = #{ orderableStatus }
             </if>
              WHERE MENU_CODE = #{ code }
     -->

        <!-- 필기. 해결방안 1: <set> 태그 이용 -->
        UPDATE
        TBL_MENU
        <set>
            <if test="name != null and name != ''">
                MENU_NAME = #{ name }
            </if>
            <if test="categoryCode != null and categoryCode gt 0">
                ,CATEGORY_CODE = #{ categoryCode }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                ,ORDERABLE_STATUS = #{ orderableStatus }
            </if>
        </set>
        WHERE MENU_CODE = #{ code }

        <!-- 필기. 해결방안 2: <trim> 태그 이용 -->
        <!--
             UPDATE
                   TBL_MENU
             <trim prefix="SET" prefixOverrides=",">
                <if test="name != null and name != ''">
                    , MENU_NAME = #{ name }
                </if>
                <if test="categoryCode != null and categoryCode gt 0">
                    , CATEGORY_CODE = #{ categoryCode }
                </if>
                <if test="orderableStatus != null and orderableStatus != ''">
                    , ORDERABLE_STATUS = #{ orderableStatus }
                </if>
            </trim>
            WHERE MENU_CODE = #{ code }
        -->
    </update>

</mapper>